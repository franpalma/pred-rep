from sklearn import datasets
library(e1071)
install.packages("e1071")
library(e1071)
?naiveBayes
Titanic
summary(Titanic)
show(Titanic)
summary(Titanic)
library(e1071)
?naiveBayes
data(“Titanic”)
data("Titanic")
Titanic_df=as.data.frame(Titanic)
Titanic_df
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)), Titanic_df$Freq)
Titanic_dataset=Titanic_df[repeating_sequence,]
Titanic_dataset
Titanic_dataset$Freq=NULL
Titanic_dataset
Naive_Bayes_Model=naiveBayes(Survived ~., data=Titanic_dataset)
Naive_Bayes_Model
NB_Predictions=predict(Naive_Bayes_Model,Titanic_dataset)
table(NB_Predictions,Titanic_dataset$Survived)
install.packages(“mlr”)
install.packages("mlr")
task = makeClassifTask(data = Titanic_dataset, target = "Survived")
library(mlr)
task = makeClassifTask(data = Titanic_dataset, target = "Survived")
task
selected_model = makeLearner("classif.naiveBayes")
NB_mlr = train(selected_model, task)
NB_mlr$learner.model
predictions_mlr = as.data.frame(predict(NB_mlr, newdata = Titanic_dataset[,1:3]))
table(predictions_mlr[,1],Titanic_dataset$Survived)
library(e1071)
model <- naiveBayes(class ~ ., data = breast_cancer)
model <- naiveBayes(class ~ ., data = breast_cancer)
data("breast_cancer")
data(breast_cancer)
data("breast_cancer")
breast_cancer
library(bnlearn)
install.packages("bnlearn")
library(bnlearn)
data(coronary)
coronary
bn_df <- data.frame(coronary)
bn_df
res <- hc(bn_df)
res
plot(res)
bn_df
bn_df[Family,]
bn_df[Family]
bn_df(Family)
bn_df.Family
bn_df2 <- bn_df[,c("Family")]
bn_df2
res
res <- hc(bn_df)
res
plot(res)
res$arcs
res$nodes
res$nodes$Smoking$mb
res$nodes$Smoking$nbr
res$nodes$Smoking$parents
res$nodes$Smoking$children
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")),]
res$arcs
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
fittedbn
fittedbn$Smoking
fittedbn$M..Work
fittedbn$Family
fittedbn$Proteins
fittedbn$Pressure
fittedbn$Smoking
fittedbn$Family
fittedbn$P..Work
fittedbn$Proteins
fittedbn$M..Work
print(fittedbn$Proteins)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Pressure==">140"), evidence = ( Proteins=="<3" ) )
cpquery(fittedbn, event = (Smoking=="no"), evidence = ( Proteins=="<3" ) )
packs <- installed.packages()
packs
clear()
clean
ins <- av[!av %in% exc]
av <- names(available.packages()[,1])
ins <- av[!av %in% exc]
packs <- installed.packages()
exc <- names(packs[,’Package’])
exc <- names(packs[,'Package'])
av <- names(available.packages()[,1])
ins <- av[!av %in% exc]
install.packages(ins)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
newdata <- subset(data,select=c(4, 6, 7, 11, 12))
fit <- glm(newdata$Result~.,data=newdata,family=binomial(link='logit'))
summary(fit)
fit <- glm(newdata$Result~newdata$ST+newdata$MC+newdata$CMC+newdata$TM.,data=newdata,family=binomial(link='logit'))
fit <- glm(newdata$Result~newdata$ST+newdata$MC+newdata$CMC+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
summary(fit)
anova(model, test="Chisq")
summary(fit)
anova(fit, test="Chisq")
# model only the intercept
mod1 <- glm(admit ~ 1, data = newdata, family = "binomial")
# model only the intercept
mod1 <- glm(newdata$Result ~ 1, data = newdata, family = "binomial")
mod2 <- glm(newdata$Result ~ newdata$ST, data = newdata, family = "binomial")
mod3 <- glm(newdata$Result ~ newdata$ST+newdata$MC, data = newdata, family = "binomial")
mod4 <- glm(newdata$Result ~ newdata$ST+newdata$MC+newdata$CMC+newdata$TM, data = newdata, family = "binomial")
anova(mod1, mod2, test="LRT")
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
newdata <- subset(data,select=c(4, 6, 7, 11, 12))
fit <- glm(newdata$Result~newdata$ST+newdata$MC+newdata$CMC+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
newdata <- subset(data,select=c(4, 6, 7, 11, 12))
fit <- glm(newdata$Result~newdata$CMC+newdata$ST+newdata$MC+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
data <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
newdata <- subset(data,select=c(4, 6, 7, 11, 12))
fit <- glm(newdata$Result~newdata$CMC+newdata$ST+newdata$MC+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~newdata$MC+newdata$CMC+newdata$ST+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~newdata$ST+newdata$MC+newdata$CMC+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~newdata$CMC+newdata$ST+newdata$MC+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~+newdata$TM+newdata$ST+newdata$MC+newdata$CMC,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~newdata$ST+newdata$TM+newdata$MC+newdata$CMC,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~newdata$CMC+newdata$ST+newdata$TM+newdata$MC,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~newdata$CMC+newdata$MC+newdata$ST+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~newdata$MC+newdata$CMC+newdata$ST+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
fit <- glm(newdata$Result~newdata$CMC+newdata$MC+newdata$ST+newdata$TM,data=newdata,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
library(pscl)
pR2(model)
pR2(fit)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
newdata <- subset(data,select=c(4, 6, 7, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
summary(train_data)
test_data <- data[ which(data$Version == max(data$Version)), ]
summary(test_data)
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM,data=train_data,family=binomial(link='logit'))
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
train_data <- train_data[-1]
summary(train_data)
test_data <- data[ which(data$Version == max(data$Version)), ]
test_data <- test_data[-1]
summary(test_data)
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM,data=train_data,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
#no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit.
library(pscl)
pR2(fit)
?subset
?subset()
test_data
#no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit.
library(pscl)
pR2(fit)
test_data
fitted.results <- predict(fit,newdata=subset(test_data,select=c(2,3,4,5,6,7,8)),type='response')
test_data
fitted.results <- predict(fit,newdata=subset(test_data,select=c(2,3,4,5)),type='response')
fitted.results <- predict(fit,newdata=subset(train_data,select=c(2,3,4,5)),type='response')
fitted.results <- predict.glm(fit,newdata=subset(train_data,select=c(2,3,4,5)),type='response')
fitted.results <- predict(fit,newdata=subset(train_data,select=c(2,3,4,5)),type='response')
fitted.results <- data.frame(predict(fit,newdata=subset(train_data,select=c(2,3,4,5)),type='response'))
View(fitted.results)
View(fitted.results)
fitted.results
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
data.test <- read.csv('RQ1_Closure-Compiler.csv',header=T)
train_data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
test_data <- subset(data.test,select=c(3, 4, 5))
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM,data=train_data,family=binomial(link='logit'))
fitted.results
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
data.test <- read.csv('RQ1_Closure-Compiler.csv',header=T)
train_data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
test_data <- subset(data.test,select=c(3, 4, 5))
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM,data=train_data,family=binomial(link='logit'))
summary(fit)
anova(fit, test="Chisq")
#no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit.
library(pscl)
pR2(fit)
test_data
fitted.results <- data.frame(predict(fit,newdata=test_data,type='response'))
View(fitted.results)
View(fitted.results)
