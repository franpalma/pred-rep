from sklearn import datasets
library(e1071)
install.packages("e1071")
library(e1071)
?naiveBayes
Titanic
summary(Titanic)
show(Titanic)
summary(Titanic)
library(e1071)
?naiveBayes
data(“Titanic”)
data("Titanic")
Titanic_df=as.data.frame(Titanic)
Titanic_df
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)), Titanic_df$Freq)
Titanic_dataset=Titanic_df[repeating_sequence,]
Titanic_dataset
Titanic_dataset$Freq=NULL
Titanic_dataset
Naive_Bayes_Model=naiveBayes(Survived ~., data=Titanic_dataset)
Naive_Bayes_Model
NB_Predictions=predict(Naive_Bayes_Model,Titanic_dataset)
table(NB_Predictions,Titanic_dataset$Survived)
install.packages(“mlr”)
install.packages("mlr")
task = makeClassifTask(data = Titanic_dataset, target = "Survived")
library(mlr)
task = makeClassifTask(data = Titanic_dataset, target = "Survived")
task
selected_model = makeLearner("classif.naiveBayes")
NB_mlr = train(selected_model, task)
NB_mlr$learner.model
predictions_mlr = as.data.frame(predict(NB_mlr, newdata = Titanic_dataset[,1:3]))
table(predictions_mlr[,1],Titanic_dataset$Survived)
library(e1071)
model <- naiveBayes(class ~ ., data = breast_cancer)
model <- naiveBayes(class ~ ., data = breast_cancer)
data("breast_cancer")
data(breast_cancer)
data("breast_cancer")
breast_cancer
library(bnlearn)
install.packages("bnlearn")
library(bnlearn)
data(coronary)
coronary
bn_df <- data.frame(coronary)
bn_df
res <- hc(bn_df)
res
plot(res)
bn_df
bn_df[Family,]
bn_df[Family]
bn_df(Family)
bn_df.Family
bn_df2 <- bn_df[,c("Family")]
bn_df2
res
res <- hc(bn_df)
res
plot(res)
res$arcs
res$nodes
res$nodes$Smoking$mb
res$nodes$Smoking$nbr
res$nodes$Smoking$parents
res$nodes$Smoking$children
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")),]
res$arcs
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
fittedbn
fittedbn$Smoking
fittedbn$M..Work
fittedbn$Family
fittedbn$Proteins
fittedbn$Pressure
fittedbn$Smoking
fittedbn$Family
fittedbn$P..Work
fittedbn$Proteins
fittedbn$M..Work
print(fittedbn$Proteins)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Pressure==">140"), evidence = ( Proteins=="<3" ) )
cpquery(fittedbn, event = (Smoking=="no"), evidence = ( Proteins=="<3" ) )
packs <- installed.packages()
packs
clear()
clean
ins <- av[!av %in% exc]
av <- names(available.packages()[,1])
ins <- av[!av %in% exc]
packs <- installed.packages()
exc <- names(packs[,’Package’])
exc <- names(packs[,'Package'])
av <- names(available.packages()[,1])
ins <- av[!av %in% exc]
install.packages(ins)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data <- subset(data.raw,select=c(1, 2, 4, 6, 7, 8, 9, 10, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
summary(train_data)
test_data <- data[ which(data$Version == max(data$Version)), ]
summary(test_data)
model <- glm(Result ~.,family=binomial(link='logit'), data = train_data)
summary(model)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data <- subset(data.raw,select=c(1, 4, 6, 7, 8, 9, 10, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
summary(train_data)
test_data <- data[ which(data$Version == max(data$Version)), ]
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
summary(train_data)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
summary(train_data)
test_data <- data[ which(data$Version == max(data$Version)), ]
summary(test_data)
model <- glm(Result ~.,family=binomial(link='logit'), data = train_data)
summary(model)
View(model)
View(model)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data.raw$MC <- scale(data.raw$MC)
View(data.raw)
View(data.raw)
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data.raw$ST <- scale(data.raw$ST)
data.raw$MC <- scale(data.raw$MC)
View(data.raw)
View(data.raw)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data.raw$ST <- scale(data.raw$ST)
data.raw$MC <- scale(data.raw$MC)
data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
summary(train_data)
test_data <- data[ which(data$Version == max(data$Version)), ]
summary(test_data)
model <- glm(Result ~.,family=binomial(link='logit'), data = train_data)
summary(model)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data.raw$ST <- scale(data.raw$ST)
data.raw$MC <- scale(data.raw$MC)
data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
train_data <- train_data[-1]
View(train_data)
View(train_data)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data.raw$ST <- scale(data.raw$ST)
data.raw$MC <- scale(data.raw$MC)
data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
train_data <- data[ which(data$Version < max(data$Version)), ]
train_data <- train_data[-1]
summary(train_data)
test_data <- data[ which(data$Version == max(data$Version)), ]
test_data <- test_data[-1]
summary(test_data)
model <- glm(Result ~.,family=binomial(link='logit'), data = train_data)
summary(model)
anova(model, test="Chisq")
library(pscl)
pR2(model)
fitted.results <- predict(model,newdata=subset(test,select=c(3,4,5,6,7,8)),type='response')
?predict()
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict.glm(model,newdata = data.frame(data$ST, data$MC, data$CMC, data$TM) ,type='response')
summary(model)
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict.glm(model,newdata = data.frame(data$ST, data$MC, data$CMC, data$TM) ,type='response')
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict(model,newdata = data.frame(data$ST, data$MC, data$CMC, data$TM) ,type='response')
model <- glm(Result ~.,family=binomial(link='logit'), data = train_data)
summary(model)
View(model)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
data.raw <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T,na.strings=c(""))
data.raw$ST <- scale(data.raw$ST)
data.raw$MC <- scale(data.raw$MC)
data <- subset(data.raw,select=c(1, 4, 6, 7, 11, 12))
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict(model,newdata = data.frame(ST, MC, CMC, TM) ,type='response')
?predict()
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict(model,data.frame(ST, MC, CMC, TM) ,type='response')
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict(model,data.frame(data$ST, data$MC, data$CMC, data$TM) ,type='response')
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict(model,newdata = as.data.frame(data$ST, data$MC, data$CMC, data$TM) ,type='response')
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict.glm(model,newdata = as.data.frame(data$ST, data$MC, data$CMC, data$TM) ,type='response')
#fitted.results <- predict(model,newdata=subset(test_data,select=c(4)),type='response')
fitted.results <- predict.glm(model,newdata = as.data.frame(as.integer(data$ST), as.integer(data$MC), as.integer(data$CMC), as.integer(data$TM)) ,type='response')
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
#load raw data
closure_compiler <- read.csv("Closure-Compiler Metrics Raw_Data.csv", header = TRUE)
library(caTools)
lrfit <- glm(closure_compiler$Result ~ closure_compiler$ST + closure_compiler$MC + closure_compiler$BC, family = binomial)
lrfit
lrfit
summary(lrfit)
pdf(file='model.pdf')
plot(lrfit)
dev.off()
residuals(lrfit)
fitted.values(lrfit)
coef(lrfit)
