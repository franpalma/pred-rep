from sklearn import datasets
library(e1071)
install.packages("e1071")
library(e1071)
?naiveBayes
Titanic
summary(Titanic)
show(Titanic)
summary(Titanic)
library(e1071)
?naiveBayes
data(“Titanic”)
data("Titanic")
Titanic_df=as.data.frame(Titanic)
Titanic_df
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)), Titanic_df$Freq)
Titanic_dataset=Titanic_df[repeating_sequence,]
Titanic_dataset
Titanic_dataset$Freq=NULL
Titanic_dataset
Naive_Bayes_Model=naiveBayes(Survived ~., data=Titanic_dataset)
Naive_Bayes_Model
NB_Predictions=predict(Naive_Bayes_Model,Titanic_dataset)
table(NB_Predictions,Titanic_dataset$Survived)
install.packages(“mlr”)
install.packages("mlr")
task = makeClassifTask(data = Titanic_dataset, target = "Survived")
library(mlr)
task = makeClassifTask(data = Titanic_dataset, target = "Survived")
task
selected_model = makeLearner("classif.naiveBayes")
NB_mlr = train(selected_model, task)
NB_mlr$learner.model
predictions_mlr = as.data.frame(predict(NB_mlr, newdata = Titanic_dataset[,1:3]))
table(predictions_mlr[,1],Titanic_dataset$Survived)
library(e1071)
model <- naiveBayes(class ~ ., data = breast_cancer)
model <- naiveBayes(class ~ ., data = breast_cancer)
data("breast_cancer")
data(breast_cancer)
data("breast_cancer")
breast_cancer
library(bnlearn)
install.packages("bnlearn")
library(bnlearn)
data(coronary)
coronary
bn_df <- data.frame(coronary)
bn_df
res <- hc(bn_df)
res
plot(res)
bn_df
bn_df[Family,]
bn_df[Family]
bn_df(Family)
bn_df.Family
bn_df2 <- bn_df[,c("Family")]
bn_df2
res
res <- hc(bn_df)
res
plot(res)
res$arcs
res$nodes
res$nodes$Smoking$mb
res$nodes$Smoking$nbr
res$nodes$Smoking$parents
res$nodes$Smoking$children
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")),]
res$arcs
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
fittedbn
fittedbn$Smoking
fittedbn$M..Work
fittedbn$Family
fittedbn$Proteins
fittedbn$Pressure
fittedbn$Smoking
fittedbn$Family
fittedbn$P..Work
fittedbn$Proteins
fittedbn$M..Work
print(fittedbn$Proteins)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Pressure==">140"), evidence = ( Proteins=="<3" ) )
cpquery(fittedbn, event = (Smoking=="no"), evidence = ( Proteins=="<3" ) )
packs <- installed.packages()
packs
clear()
clean
ins <- av[!av %in% exc]
av <- names(available.packages()[,1])
ins <- av[!av %in% exc]
packs <- installed.packages()
exc <- names(packs[,’Package’])
exc <- names(packs[,'Package'])
av <- names(available.packages()[,1])
ins <- av[!av %in% exc]
install.packages(ins)
setwd('D:/pred-rep/tanzeem_noor-promise17_data/predict')
my_traditional_predict_results_compiler <- read.csv('traditional_predict_results_compiler.csv',header=T)
my_traditional_predict_results_jfreechart <- read.csv('traditional_predict_results_jfreechart.csv',header=T)
my_traditional_predict_results_lang <- read.csv('traditional_predict_results_lang.csv',header=T)
my_traditional_predict_results_math <- read.csv('traditional_predict_results_math.csv',header=T)
my_traditional_predict_results_time <- read.csv('traditional_predict_results_time.csv',header=T)
my_similarity_predict_results_compiler <- read.csv('similarity_predict_results_compiler.csv',header=T)
my_similarity_predict_results_jfreechart <- read.csv('similarity_predict_results_jfreechart.csv',header=T)
my_similarity_predict_results_lang <- read.csv('similarity_predict_results_lang.csv',header=T)
my_similarity_predict_results_math <- read.csv('similarity_predict_results_math.csv',header=T)
my_similarity_predict_results_time <- read.csv('similarity_predict_results_time.csv',header=T)
their_traditional_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Closure-Compiler.csv',header=T)
their_traditional_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Lang.csv',header=T)
their_traditional_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Math.csv',header=T)
their_traditional_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_JFreeChart.csv',header=T)
their_traditional_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Joda-Time.csv',header=T)
their_similarity_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Closure-Compiler.csv',header=T)
their_similarity_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Lang.csv',header=T)
their_similarity_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Math.csv',header=T)
their_similarity_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_JFreeChart.csv',header=T)
their_similarity_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Joda-Time.csv',header=T)
#compiler
dt1 <- their_traditional_predict_results_compiler$rank_Model
dt2 <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex
dt3 <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
dt4 <- their_similarity_predict_results_compiler$rank_Proposed_Model
dt5 <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim
dt6 <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
#pdf("comparison_compiler.pdf")
boxplot(dt1, dt2, dt3, dt4, dt5, dt6,
names=c("Origin_Traditional","Rep_Traditional","Traditional2","Origin_Similarity","Rep_Similarity","Similarity2"),
ylab="% TCs to be executed for finding the first failing TC",
col="white", cex.lab=.95, cex.axis=.95, srt = 45)
setwd('D:/pred-rep/tanzeem_noor-promise17_data/predict')
my_traditional_predict_results_compiler <- read.csv('traditional_predict_results_compiler.csv',header=T)
my_traditional_predict_results_jfreechart <- read.csv('traditional_predict_results_jfreechart.csv',header=T)
my_traditional_predict_results_lang <- read.csv('traditional_predict_results_lang.csv',header=T)
my_traditional_predict_results_math <- read.csv('traditional_predict_results_math.csv',header=T)
my_traditional_predict_results_time <- read.csv('traditional_predict_results_time.csv',header=T)
my_similarity_predict_results_compiler <- read.csv('similarity_predict_results_compiler.csv',header=T)
my_similarity_predict_results_jfreechart <- read.csv('similarity_predict_results_jfreechart.csv',header=T)
my_similarity_predict_results_lang <- read.csv('similarity_predict_results_lang.csv',header=T)
my_similarity_predict_results_math <- read.csv('similarity_predict_results_math.csv',header=T)
my_similarity_predict_results_time <- read.csv('similarity_predict_results_time.csv',header=T)
their_traditional_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Closure-Compiler.csv',header=T)
their_traditional_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Lang.csv',header=T)
their_traditional_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Math.csv',header=T)
their_traditional_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_JFreeChart.csv',header=T)
their_traditional_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Joda-Time.csv',header=T)
their_similarity_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Closure-Compiler.csv',header=T)
their_similarity_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Lang.csv',header=T)
their_similarity_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Math.csv',header=T)
their_similarity_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_JFreeChart.csv',header=T)
their_similarity_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Joda-Time.csv',header=T)
#compiler
dt1 <- their_traditional_predict_results_compiler$rank_Model
dt2 <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex
dt3 <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
dt4 <- their_similarity_predict_results_compiler$rank_Proposed_Model
dt5 <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim
dt6 <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
#pdf("comparison_compiler.pdf")
boxplot(dt1, dt2, dt3, dt4, dt5, dt6,
names=c("Origin_Traditional","Rep_Traditional","Traditional2","Origin_Similarity","Rep_Similarity","Similarity2"),
ylab="% TCs to be executed to find the first failing TC",
col="white", cex.lab=.95, cex.axis=.95, srt = 45)
#jfreechart
dt1 <- their_traditional_predict_results_jfreechart$rank_Model
dt2 <- my_traditional_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex
dt3 <- my_traditional_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_mod
dt4 <- their_similarity_predict_results_jfreechart$rank_Proposed_Model
dt5 <- my_similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_sim
dt6 <- my_similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_sim_mod
#pdf("comparison_jfreechart.pdf")
boxplot(dt1, dt2, dt3, dt4, dt5, dt6,
names=c("Origin_Traditional","Rep_Traditional","Traditional2","Origin_Similarity","Rep_Similarity","Similarity2"),
ylab="% TCs to be executed to find the first failing TC",
col="white", cex.lab=.95, cex.axis=.95, srt = 45)
dev.flush()
#lang
dt1 <- their_traditional_predict_results_lang$rank_Model
dt2 <- my_traditional_predict_results_lang$output_rank_model_lang_rankIndex
dt3 <- my_traditional_predict_results_lang$output_rank_model_lang_rankIndex_mod
dt4 <- their_similarity_predict_results_lang$rank_Proposed_Model
dt5 <- my_similarity_predict_results_lang$output_rank_model_lang_rankIndex_sim
dt6 <- my_similarity_predict_results_lang$output_rank_model_lang_rankIndex_sim_mod
#pdf("comparison_lang.pdf")
boxplot(dt1, dt2, dt3, dt4, dt5, dt6,
names=c("Origin_Traditional","Rep_Traditional","Traditional2","Origin_Similarity","Rep_Similarity","Similarity2"),
ylab="% TCs to be executed to find the first failing TC",
col="white", cex.lab=.95, cex.axis=.95, srt = 45)
#math
dt1 <- their_traditional_predict_results_math$rank_Model
dt2 <- my_traditional_predict_results_math$output_rank_model_math_rankIndex
dt3 <- my_traditional_predict_results_math$output_rank_model_math_rankIndex_mod
dt4 <- their_similarity_predict_results_math$rank_Proposed_Model
dt5 <- my_similarity_predict_results_math$output_rank_model_math_rankIndex_sim
dt6 <- my_similarity_predict_results_math$output_rank_model_math_rankIndex_sim_mod
#pdf("comparison_math.pdf")
boxplot(dt1, dt2, dt3, dt4, dt5, dt6,
names=c("Origin_Traditional","Rep_Traditional","Traditional2","Origin_Similarity","Rep_Similarity","Similarity2"),
ylab="% TCs to be executed to find the first failing TC",
col="white", cex.lab=.95, cex.axis=.95, srt = 45)
#time
dt1 <- their_traditional_predict_results_time$rank_Model
dt2 <- my_traditional_predict_results_time$output_rank_model_time_rankIndex
dt3 <- my_traditional_predict_results_time$output_rank_model_time_rankIndex_mod
dt4 <- their_similarity_predict_results_time$rank_Proposed_Model
#time
dt1 <- their_traditional_predict_results_time$rank_Model
dt2 <- my_traditional_predict_results_time$output_rank_model_time_rankIndex
dt3 <- my_traditional_predict_results_time$output_rank_model_time_rankIndex_mod
dt4 <- their_similarity_predict_results_time$rank_Proposed_Model
dt5 <- my_similarity_predict_results_time$output_rank_model_time_rankIndex_sim
dt6 <- my_similarity_predict_results_time$output_rank_model_time_rankIndex_sim_mod
#pdf("comparison_time.pdf")
boxplot(dt1, dt2, dt3, dt4, dt5, dt6,
names=c("Origin_Traditional","Rep_Traditional","Traditional2","Origin_Similarity","Rep_Similarity","Similarity2"),
ylab="% TCs to be executed to find the first failing TC",
col="white", cex.lab=.95, cex.axis=.95, srt = 45)
dev.flush()
#time
dt1 <- their_traditional_predict_results_time$rank_Model
dt2 <- my_traditional_predict_results_time$output_rank_model_time_rankIndex
dt3 <- my_traditional_predict_results_time$output_rank_model_time_rankIndex_mod
dt4 <- their_similarity_predict_results_time$rank_Proposed_Model
dt5 <- my_similarity_predict_results_time$output_rank_model_time_rankIndex_sim
dt6 <- my_similarity_predict_results_time$output_rank_model_time_rankIndex_sim_mod
#pdf("comparison_time.pdf")
boxplot(dt1, dt2, dt3, dt4, dt5, dt6,
names=c("Origin_Traditional","Rep_Traditional","Traditional2","Origin_Similarity","Rep_Similarity","Similarity2"),
ylab="% TCs to be executed to find the first failing TC",
col="white", cex.lab=.95, cex.axis=.95, srt = 45)
dev.flush()
setwd('D:/pred-rep/tanzeem_noor-promise17_data/predict')
traditional_predict_results_compiler <- read.csv('traditional_predict_results_compiler.csv',header=T)
traditional_predict_results_jfreechart <- read.csv('traditional_predict_results_jfreechart.csv',header=T)
traditional_predict_results_lang <- read.csv('traditional_predict_results_lang.csv',header=T)
traditional_predict_results_math <- read.csv('traditional_predict_results_math.csv',header=T)
traditional_predict_results_time <- read.csv('traditional_predict_results_time.csv',header=T)
similarity_predict_results_compiler <- read.csv('similarity_predict_results_compiler.csv',header=T)
similarity_predict_results_jfreechart <- read.csv('similarity_predict_results_jfreechart.csv',header=T)
similarity_predict_results_lang <- read.csv('similarity_predict_results_lang.csv',header=T)
similarity_predict_results_math <- read.csv('similarity_predict_results_math.csv',header=T)
similarity_predict_results_time <- read.csv('similarity_predict_results_time.csv',header=T)
a <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
b <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
library(effsize)
a <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
b <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
b <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex
wilcox.test(a, b, conf.level = 0.95)
a <- traditional_predict_results_lang$output_rank_model_lang_rankIndex_mod
b <- traditional_predict_results_lang$output_rank_model_lang_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- traditional_predict_results_math$output_rank_model_math_rankIndex_mod
b <- traditional_predict_results_math$output_rank_model_math_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
b <- traditional_predict_results_j$output_rank_model_lang_rankIndex
a <- traditional_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_mod
b <- traditional_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- traditional_predict_results_time$output_rank_model_time_rankIndex_mod
b <- traditional_predict_results_time$output_rank_model_time_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_math$output_rank_model_math_rankIndex_sim_mod
a <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
a <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_lang$output_rank_model_lang_rankIndex_sim_mod
b <- similarity_predict_results_lang$output_rank_model_lang_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_math$output_rank_model_math_rankIndex_sim_mod
b <- similarity_predict_results_math$output_rank_model_math_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_sim_mod
b <- similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_time$output_rank_model_time_rankIndex_sim_mod
b <- similarity_predict_results_time$output_rank_model_time_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
a <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_lang$output_rank_model_lang_rankIndex_sim_mod
b <- traditional_predict_results_lang$output_rank_model_lang_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_math$output_rank_model_math_rankIndex_sim_mod
b <- traditional_predict_results_math$output_rank_model_math_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_sim_mod
b <- traditional_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- similarity_predict_results_time$output_rank_model_time_rankIndex_sim_mod
b <- traditional_predict_results_time$output_rank_model_time_rankIndex
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
setwd('D:/pred-rep/tanzeem_noor-promise17_data/predict')
my_traditional_predict_results_compiler <- read.csv('traditional_predict_results_compiler.csv',header=T)
my_traditional_predict_results_jfreechart <- read.csv('traditional_predict_results_jfreechart.csv',header=T)
my_traditional_predict_results_lang <- read.csv('traditional_predict_results_lang.csv',header=T)
my_traditional_predict_results_math <- read.csv('traditional_predict_results_math.csv',header=T)
my_traditional_predict_results_time <- read.csv('traditional_predict_results_time.csv',header=T)
my_similarity_predict_results_compiler <- read.csv('similarity_predict_results_compiler.csv',header=T)
my_similarity_predict_results_jfreechart <- read.csv('similarity_predict_results_jfreechart.csv',header=T)
my_similarity_predict_results_lang <- read.csv('similarity_predict_results_lang.csv',header=T)
my_similarity_predict_results_math <- read.csv('similarity_predict_results_math.csv',header=T)
my_similarity_predict_results_time <- read.csv('similarity_predict_results_time.csv',header=T)
their_traditional_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Closure-Compiler.csv',header=T)
their_traditional_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Lang.csv',header=T)
their_traditional_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Math.csv',header=T)
their_traditional_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_JFreeChart.csv',header=T)
their_traditional_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Joda-Time.csv',header=T)
their_similarity_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Lang.csv',header=T)
their_similarity_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Math.csv',header=T)
their_similarity_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Closure-Compiler.csv',header=T)
their_similarity_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_JFreeChart.csv',header=T)
their_similarity_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Joda-Time.csv',header=T)
library(effsize)
a <- my_similarity_predict_results_math$output_rank_model_math_rankIndex_sim_mod
a <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- their_traditional_predict_results_compiler$rank_Model
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
b <- their_traditional_predict_results_compiler$rank_Model
a <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
b <- their_traditional_predict_results_compiler$rank_Model
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a
b
wilcox.test(a[-1], b, conf.level = 0.95)
a[-1]
a
a[-1]
a[-length(a)]
a <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
b <- their_traditional_predict_results_compiler$rank_Model
a
a[-length(a)]
a <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
b <- their_traditional_predict_results_compiler$rank_Model
wilcox.test(a[-length(a)], b, conf.level = 0.95)
VD.A(a[-length(a)] ~ b)
a <- my_traditional_predict_results_lang$output_rank_model_lang_rankIndex_mod
b <- their_traditional_predict_results_lang$rank_Model
wilcox.test(a[-length(a)], b, conf.level = 0.95)
VD.A(a[-length(a)] ~ b)
b
a[-length(a)]
a <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- their_similarity_predict_results_compiler$rank_Proposed_Model
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
kruskal.test(list(similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod, similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim, similarity_predict_results_compiler$output_rank_model_compiler_rankIndex))
kruskal.test(list(similarity_predict_results_lang$output_rank_model_lang_rankIndex_sim_mod, similarity_predict_results_lang$output_rank_model_lang_rankIndex_sim, similarity_predict_results_lang$output_rank_model_lang_rankIndex))
kruskal.test(list(similarity_predict_results_math$output_rank_model_math_rankIndex_sim_mod, similarity_predict_results_math$output_rank_model_math_rankIndex_sim, similarity_predict_results_math$output_rank_model_math_rankIndex))
kruskal.test(list(similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_sim_mod, similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_sim, similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex))
kruskal.test(list(similarity_predict_results_time$output_rank_model_time_rankIndex_sim_mod, similarity_predict_results_time$output_rank_model_time_rankIndex_sim, similarity_predict_results_time$output_rank_model_time_rankIndex))
a <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
a <- traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
a
b <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- traditional_predict_results_lang$output_rank_model_lang_rankIndex_mod
b <- similarity_predict_results_lang$output_rank_model_lang_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- traditional_predict_results_math$output_rank_model_math_rankIndex_mod
b <- similarity_predict_results_math$output_rank_model_math_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- traditional_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_mod
b <- similarity_predict_results_jfreechart$output_rank_model_jfreechart_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
a <- traditional_predict_results_time$output_rank_model_time_rankIndex_mod
b <- similarity_predict_results_time$output_rank_model_time_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
VD.A(a ~ b)
setwd('D:/pred-rep/tanzeem_noor-promise17_data/predict')
my_traditional_predict_results_compiler <- read.csv('traditional_predict_results_compiler.csv',header=T)
my_traditional_predict_results_jfreechart <- read.csv('traditional_predict_results_jfreechart.csv',header=T)
my_traditional_predict_results_lang <- read.csv('traditional_predict_results_lang.csv',header=T)
my_traditional_predict_results_math <- read.csv('traditional_predict_results_math.csv',header=T)
my_traditional_predict_results_time <- read.csv('traditional_predict_results_time.csv',header=T)
my_similarity_predict_results_compiler <- read.csv('similarity_predict_results_compiler.csv',header=T)
my_similarity_predict_results_jfreechart <- read.csv('similarity_predict_results_jfreechart.csv',header=T)
my_similarity_predict_results_lang <- read.csv('similarity_predict_results_lang.csv',header=T)
my_similarity_predict_results_math <- read.csv('similarity_predict_results_math.csv',header=T)
my_similarity_predict_results_time <- read.csv('similarity_predict_results_time.csv',header=T)
their_traditional_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Closure-Compiler.csv',header=T)
their_traditional_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Lang.csv',header=T)
their_traditional_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Math.csv',header=T)
their_traditional_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_JFreeChart.csv',header=T)
their_traditional_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Joda-Time.csv',header=T)
their_similarity_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Closure-Compiler.csv',header=T)
their_similarity_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Lang.csv',header=T)
their_similarity_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Math.csv',header=T)
their_similarity_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_JFreeChart.csv',header=T)
their_similarity_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Joda-Time.csv',header=T)
