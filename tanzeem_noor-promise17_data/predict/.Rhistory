}
}
output_rank_model_math_Ver <- data.frame(output_rank_model_math_Ver)
output_rank_model_math_rankIndex <-  data.frame(output_rank_model_math_rankIndex)
#MODIFIED MODEL
data.raw.math <- read.csv('Commons-Math Metrics Raw_Data.csv',header=T)
train_data <- data.raw.math
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM+(train_data$MC/train_data$ST)+(train_data$CMC/train_data$ST),data=train_data,family=binomial(link='logit'))
summary(fit)
#run the anova() function on the model to analyze the table of deviance
anova(fit, test="Chisq")
#no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit.
library(pscl)
pR2(fit)
fitted.results <- data.frame(predict(fit,newdata=train_data,type='response'))
train_data <- predicted_merge_values <- cbind(train_data, fitted.results)
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(predict.fit..newdata...train_data..type....response..))
output_rank_model_math_Ver_mod <- c()
output_rank_model_math_rankIndex_mod <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_model_math_Ver_mod[[idx]] <- i
output_rank_model_math_rankIndex_mod[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_model_math_Ver_mod <- data.frame(output_rank_model_math_Ver_mod)
output_rank_model_math_rankIndex_mod <-  data.frame(output_rank_model_math_rankIndex_mod)
final_output <- cbind(output_rank_ST_math_Ver, output_rank_ST_math_rankIndex, output_rank_MC_math_rankIndex, output_rank_CMC_math_rankIndex, output_rank_TM_math_rankIndex, output_rank_model_math_rankIndex, output_rank_model_math_rankIndex_mod)
write.csv(final_output, file = "predict/traditional_predict_results_math.csv")
#JFreeChart
data.raw.jfreechart <- read.csv('JFreeChart Metrics Raw_Data.csv',header=T)
train_data <- data.raw.jfreechart
#ST
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(ST))
output_rank_ST_jfreechart_Ver <- c()
output_rank_ST_jfreechart_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_ST_jfreechart_Ver[[idx]] <- i
output_rank_ST_jfreechart_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_ST_jfreechart_Ver <- data.frame(output_rank_ST_jfreechart_Ver)
output_rank_ST_jfreechart_rankIndex <-  data.frame(output_rank_ST_jfreechart_rankIndex)
#MC
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(MC))
output_rank_MC_jfreechart_Ver <- c()
output_rank_MC_jfreechart_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_MC_jfreechart_Ver[[idx]] <- i
output_rank_MC_jfreechart_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_MC_jfreechart_Ver <- data.frame(output_rank_MC_jfreechart_Ver)
output_rank_MC_jfreechart_rankIndex <-  data.frame(output_rank_MC_jfreechart_rankIndex)
#CMC
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(CMC))
output_rank_CMC_jfreechart_Ver <- c()
output_rank_CMC_jfreechart_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_CMC_jfreechart_Ver[[idx]] <- i
output_rank_CMC_jfreechart_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_CMC_jfreechart_Ver <- data.frame(output_rank_CMC_jfreechart_Ver)
output_rank_CMC_jfreechart_rankIndex <-  data.frame(output_rank_CMC_jfreechart_rankIndex)
#TM
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(TM))
output_rank_TM_jfreechart_Ver <- c()
output_rank_TM_jfreechart_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_TM_jfreechart_Ver[[idx]] <- i
output_rank_TM_jfreechart_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_TM_jfreechart_Ver <- data.frame(output_rank_TM_jfreechart_Ver)
output_rank_TM_jfreechart_rankIndex <-  data.frame(output_rank_TM_jfreechart_rankIndex)
#MODEL
data.raw.jfreechart <- read.csv('JFreeChart Metrics Raw_Data.csv',header=T)
train_data <- data.raw.jfreechart
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM,data=train_data,family=binomial(link='logit'))
summary(fit)
#run the anova() function on the model to analyze the table of deviance
anova(fit, test="Chisq")
#no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit.
library(pscl)
pR2(fit)
fitted.results <- data.frame(predict(fit,newdata=train_data,type='response'))
train_data <- predicted_merge_values <- cbind(train_data, fitted.results)
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(predict.fit..newdata...train_data..type....response..))
output_rank_model_jfreechart_Ver <- c()
output_rank_model_jfreechart_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_model_jfreechart_Ver[[idx]] <- i
output_rank_model_jfreechart_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_model_jfreechart_Ver <- data.frame(output_rank_model_jfreechart_Ver)
output_rank_model_jfreechart_rankIndex <-  data.frame(output_rank_model_jfreechart_rankIndex)
# MODIFIED MODEL
data.raw.jfreechart <- read.csv('JFreeChart Metrics Raw_Data.csv',header=T)
train_data <- data.raw.jfreechart
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM+(train_data$MC/train_data$ST)+(train_data$CMC/train_data$ST),data=train_data,family=binomial(link='logit'))
summary(fit)
#run the anova() function on the model to analyze the table of deviance
anova(fit, test="Chisq")
#no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit.
library(pscl)
pR2(fit)
fitted.results <- data.frame(predict(fit,newdata=train_data,type='response'))
train_data <- predicted_merge_values <- cbind(train_data, fitted.results)
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(predict.fit..newdata...train_data..type....response..))
output_rank_model_jfreechart_Ver_mod <- c()
output_rank_model_jfreechart_rankIndex_mod <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_model_jfreechart_Ver_mod[[idx]] <- i
output_rank_model_jfreechart_rankIndex_mod[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_model_jfreechart_Ver_mod <- data.frame(output_rank_model_jfreechart_Ver_mod)
output_rank_model_jfreechart_rankIndex_mod <-  data.frame(output_rank_model_jfreechart_rankIndex_mod)
final_output <- cbind(output_rank_ST_jfreechart_Ver, output_rank_ST_jfreechart_rankIndex, output_rank_MC_jfreechart_rankIndex, output_rank_CMC_jfreechart_rankIndex, output_rank_TM_jfreechart_rankIndex, output_rank_model_jfreechart_rankIndex, output_rank_model_jfreechart_rankIndex_mod)
write.csv(final_output, file = "predict/traditional_predict_results_jfreechart.csv")
#Joda-Time
data.raw.time <- read.csv('Joda-Time Metrics Raw_Data.csv',header=T)
train_data <- data.raw.time
#ST
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(ST))
output_rank_ST_time_Ver <- c()
output_rank_ST_time_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_ST_time_Ver[[idx]] <- i
output_rank_ST_time_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_ST_time_Ver <- data.frame(output_rank_ST_time_Ver)
output_rank_ST_time_rankIndex <-  data.frame(output_rank_ST_time_rankIndex)
#MC
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(MC))
output_rank_MC_time_Ver <- c()
output_rank_MC_time_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_MC_time_Ver[[idx]] <- i
output_rank_MC_time_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_MC_time_Ver <- data.frame(output_rank_MC_time_Ver)
output_rank_MC_time_rankIndex <-  data.frame(output_rank_MC_time_rankIndex)
#CMC
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(CMC))
output_rank_CMC_time_Ver <- c()
output_rank_CMC_time_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_CMC_time_Ver[[idx]] <- i
output_rank_CMC_time_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_CMC_time_Ver <- data.frame(output_rank_CMC_time_Ver)
output_rank_CMC_time_rankIndex <-  data.frame(output_rank_CMC_time_rankIndex)
#TM
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(TM))
output_rank_TM_time_Ver <- c()
output_rank_TM_time_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_TM_time_Ver[[idx]] <- i
output_rank_TM_time_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_TM_time_Ver <- data.frame(output_rank_TM_time_Ver)
output_rank_TM_time_rankIndex <-  data.frame(output_rank_TM_time_rankIndex)
#MODEL
data.raw.time <- read.csv('Joda-Time Metrics Raw_Data.csv',header=T)
train_data <- data.raw.time
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM,data=train_data,family=binomial(link='logit'))
summary(fit)
#run the anova() function on the model to analyze the table of deviance
anova(fit, test="Chisq")
#no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit.
library(pscl)
pR2(fit)
fitted.results <- data.frame(predict(fit,newdata=train_data,type='response'))
train_data <- predicted_merge_values <- cbind(train_data, fitted.results)
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(predict.fit..newdata...train_data..type....response..))
output_rank_model_time_Ver <- c()
output_rank_model_time_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_model_time_Ver[[idx]] <- i
output_rank_model_time_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_model_time_Ver <- data.frame(output_rank_model_time_Ver)
output_rank_model_time_rankIndex <-  data.frame(output_rank_model_time_rankIndex)
#MODEL
data.raw.time <- read.csv('Joda-Time Metrics Raw_Data.csv',header=T)
train_data <- data.raw.time
fit <- glm(train_data$Result~train_data$CMC+train_data$MC+train_data$ST+train_data$TM+(train_data$MC/train_data$ST),data=train_data,family=binomial(link='logit'))
summary(fit)
#run the anova() function on the model to analyze the table of deviance
anova(fit, test="Chisq")
#no exact equivalent to the R2 of linear regression exists, the McFadden R2 index can be used to assess the model fit.
library(pscl)
pR2(fit)
fitted.results <- data.frame(predict(fit,newdata=train_data,type='response'))
train_data <- predicted_merge_values <- cbind(train_data, fitted.results)
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(predict.fit..newdata...train_data..type....response..))
output_rank_model_time_Ver_mod <- c()
output_rank_model_time_rankIndex_mod <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_model_time_Ver_mod[[idx]] <- i
output_rank_model_time_rankIndex_mod[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_model_time_Ver_mod <- data.frame(output_rank_model_time_Ver_mod)
output_rank_model_time_rankIndex_mod <-  data.frame(output_rank_model_time_rankIndex_mod)
final_output <- cbind(output_rank_ST_time_Ver, output_rank_ST_time_rankIndex, output_rank_MC_time_rankIndex, output_rank_CMC_time_rankIndex, output_rank_TM_time_rankIndex, output_rank_model_time_rankIndex, output_rank_model_time_rankIndex_mod)
write.csv(final_output, file = "predict/traditional_predict_results_time.csv")
output_rank_model_compiler_rankIndex
sort_train_data
output_rank_TM_compiler_rankIndex
arrange(desc(TM)
train_data %>% group_by(Version) %>% arrange(desc(TM))
sort_train_data
summary(sort_train_data)
setwd('D:/pred-rep/tanzeem_noor-promise17_data')
library(dplyr)
library(caret)
library(iterators)
data.raw.compiler <- read.csv('Closure-Compiler Metrics Raw_Data.csv',header=T)
train_data <- data.raw.compiler
#ST
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(ST))
output_rank_ST_compiler_Ver <- c()
output_rank_ST_compiler_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_ST_compiler_Ver[[idx]] <- i
output_rank_ST_compiler_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_ST_compiler_Ver <- data.frame(output_rank_ST_compiler_Ver)
output_rank_ST_compiler_rankIndex <-  data.frame(output_rank_ST_compiler_rankIndex)
#MC
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(MC))
output_rank_MC_compiler_Ver <- c()
output_rank_MC_compiler_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_MC_compiler_Ver[[idx]] <- i
output_rank_MC_compiler_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_MC_compiler_Ver <- data.frame(output_rank_MC_compiler_Ver)
output_rank_MC_compiler_rankIndex <-  data.frame(output_rank_MC_compiler_rankIndex)
#CMC
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(CMC))
output_rank_CMC_compiler_Ver <- c()
output_rank_CMC_compiler_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_CMC_compiler_Ver[[idx]] <- i
output_rank_CMC_compiler_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_CMC_compiler_Ver <- data.frame(output_rank_CMC_compiler_Ver)
output_rank_CMC_compiler_rankIndex <-  data.frame(output_rank_CMC_compiler_rankIndex)
#TM
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(TM))
sort_train_data
#TM
sort_train_data <- train_data %>% group_by(Version) %>% arrange(desc(TM))
output_rank_TM_compiler_Ver <- c()
output_rank_TM_compiler_rankIndex <- c()
idx <- 1
for (i in c(1:132)){
if(i %in% sort_train_data$Version){
split_train_data <- sort_train_data[sort_train_data$Version == i,]
for(j in c(1:nrow(split_train_data))){
if (split_train_data$Result[j] == 1) {
output_rank_TM_compiler_Ver[[idx]] <- i
output_rank_TM_compiler_rankIndex[[idx]] <- j/nrow(split_train_data)
idx <- idx + 1
break;
}
}
}
}
output_rank_TM_compiler_Ver <- data.frame(output_rank_TM_compiler_Ver)
output_rank_TM_compiler_rankIndex <-  data.frame(output_rank_TM_compiler_rankIndex)
output_rank_TM_compiler_rankIndex
output_rank_TM_compiler_Ver
output_rank_TM_compiler_rankIndex
sort_train_data
View(sort_train_data)
View(sort_train_data)
setwd('D:/pred-rep/tanzeem_noor-promise17_data/predict')
traditional_predict_results_compiler <- read.csv('traditional_predict_results_compiler.csv',header=T)
traditional_predict_results_jfreechart <- read.csv('traditional_predict_results_jfreechart.csv',header=T)
traditional_predict_results_lang <- read.csv('traditional_predict_results_lang.csv',header=T)
traditional_predict_results_math <- read.csv('traditional_predict_results_math.csv',header=T)
traditional_predict_results_time <- read.csv('traditional_predict_results_time.csv',header=T)
similarity_predict_results_compiler <- read.csv('similarity_predict_results_compiler.csv',header=T)
similarity_predict_results_jfreechart <- read.csv('similarity_predict_results_jfreechart.csv',header=T)
similarity_predict_results_lang <- read.csv('similarity_predict_results_lang.csv',header=T)
similarity_predict_results_math <- read.csv('similarity_predict_results_math.csv',header=T)
similarity_predict_results_time <- read.csv('similarity_predict_results_time.csv',header=T)
a <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95)
wilcox.test(b, a, conf.level = 0.95)
t(b, a, conf.level = 0.95)
t.test(b, a, conf.level = 0.95)
?wilcox.test
wilcox.test(b, a, conf.level = 0.95, paired = FALSE)
wilcox.test(b, a, conf.level = 0.95, paired = FALSE, exact = TRUE)
wilcox.test(b, a, conf.level = 0.95, paired = FALSE, conf.int = TRUE)
wilcox.test(b, a, conf.level = 0.95, paired = FALSE, conf.int = FALSE)
wilcox.test(b, a, conf.level = 0.95, paired = FALSE, exact = TRUE)
wilcox.test(b, a, conf.level = 0.95, paired = FALSE, exact = FALSE)
wilcox.test(a, b, conf.level = 0.95, paired = FALSE, exact = FALSE, )
wilcox.test(a - b, conf.level = 0.95, paired = FALSE, exact = FALSE, )
wilcox.test(a ~ b, conf.level = 0.95, paired = FALSE, exact = FALSE, )
wilcox.test(a, b, conf.level = 0.95, paired = FALSE, exact = FALSE, )
wilcox.test(a, b, conf.level = 0.9, paired = FALSE, exact = FALSE, )
wilcox.test(a, b, conf.level = 0.1, paired = FALSE, exact = FALSE, )
wilcox.test(a, b, conf.level = 0.95, paired = FALSE, exact = FALSE)
t.test(a, b)
t.test(a, b, conf.level = 0.15)
a <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim
wilcox.test(a, b, conf.level = 0.95, paired = FALSE, exact = FALSE)
setwd('D:/pred-rep/tanzeem_noor-promise17_data/predict')
my_traditional_predict_results_compiler <- read.csv('traditional_predict_results_compiler.csv',header=T)
my_traditional_predict_results_jfreechart <- read.csv('traditional_predict_results_jfreechart.csv',header=T)
my_traditional_predict_results_lang <- read.csv('traditional_predict_results_lang.csv',header=T)
my_traditional_predict_results_math <- read.csv('traditional_predict_results_math.csv',header=T)
my_traditional_predict_results_time <- read.csv('traditional_predict_results_time.csv',header=T)
my_similarity_predict_results_compiler <- read.csv('similarity_predict_results_compiler.csv',header=T)
my_similarity_predict_results_jfreechart <- read.csv('similarity_predict_results_jfreechart.csv',header=T)
my_similarity_predict_results_lang <- read.csv('similarity_predict_results_lang.csv',header=T)
my_similarity_predict_results_math <- read.csv('similarity_predict_results_math.csv',header=T)
my_similarity_predict_results_time <- read.csv('similarity_predict_results_time.csv',header=T)
their_traditional_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Closure-Compiler.csv',header=T)
their_traditional_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Lang.csv',header=T)
their_traditional_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Commons-Math.csv',header=T)
their_traditional_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_JFreeChart.csv',header=T)
their_traditional_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ1_Joda-Time.csv',header=T)
their_similarity_predict_results_compiler <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Closure-Compiler.csv',header=T)
their_similarity_predict_results_jfreechart <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Lang.csv',header=T)
their_similarity_predict_results_lang <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Commons-Math.csv',header=T)
their_similarity_predict_results_math <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_JFreeChart.csv',header=T)
their_similarity_predict_results_time <- read.csv('D:/pred-rep/tanzeem_noor-promise17_data/RQ2_Joda-Time.csv',header=T)
a <- my_traditional_predict_results_compiler$output_rank_model_compiler_rankIndex_mod
b <- their_traditional_predict_results_compiler$rank_Model
wilcox.test(a, b, conf.level = 0.95, paired = FALSE, exact = FALSE)
a <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- their_traditional_predict_results_compiler$rank_Model
wilcox.test(a, b, conf.level = 0.95, paired = FALSE, exact = FALSE)
a <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- their_traditional_predict_results_compiler$rank_Model
wilcox.test(a, b, conf.level = 0.95, paired = FALSE, exact = FALSE)
VD.A(a ~ b, conf.level = 0.95)
library(effsize)
a <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- their_traditional_predict_results_compiler$rank_Model
wilcox.test(a, b, conf.level = 0.95, paired = FALSE, exact = FALSE)
VD.A(a ~ b, conf.level = 0.95)
VD.A(b ~ a, conf.level = 0.95)
?VD.A
wilcox.test(a, b, conf.level = 0.95, paired = TRUE, exact = FALSE)
library(effsize)
a <- my_similarity_predict_results_compiler$output_rank_model_compiler_rankIndex_sim_mod
b <- their_traditional_predict_results_compiler$rank_Model
wilcox.test(a, b, conf.level = 0.95, paired = TRUE, exact = FALSE)
